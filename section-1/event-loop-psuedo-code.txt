// node myFile.js

const pendingTimers = [];
const pendingOsTasks = [];
const pendingOperations = [];

// New timers, tasks, operations are recorded from myFile running
myFile.runContent();

function shouldContinue() {
    // Check one: Any pending setTimeout, setInterval, setImmediate?
    // Check two: Any pending OS tasks? (Like server listening to port)
    // Check three: Any pending long running operations? (Like fs module)
    return pendingTimers.length || pendingOsTasks.length || pendingOperations.length;
}

// Entire body executes in on 'tick'
while(shouldContinue()) {
    // 1) Node looks at pendingTimers and sees if any functions
    // are ready to be called. setTimeout, setInterval
    
    // 2) Node looks at pendingOsTasks and pendingOperations
    // and calls relevant callback

    // 3) Pause execution. Continue when...
    // -a new pendingOsTasks is done
    // -a new pendingOperations is done
    // -a timer is about to complete

    // 4) Look at pendingTimers. Call any setImmediate

    // 5) Handle any 'close' events // readStream.on('close', () => {console.log('Cleanup code')});
    // this is to handle any cleanup code
}

// exit back to terminal